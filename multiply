using System; 

class Program
{
    static void Main()
    {
        // Запрашиваем пользователя ввести первое число
        Console.WriteLine("Введите первое число: ");
        int a = Convert.ToInt32(Console.ReadLine()); // Считываем и конвертируем введенное значение в целое число

        // Запрашиваем пользователя ввести второе число
        Console.WriteLine("Введите второе число: ");
        int b = Convert.ToInt32(Console.ReadLine()); // Считываем и конвертируем введенное значение в целое число

        // Инициализация переменной для результата обычного сложения
        int result = 0;

        // Используем цикл for для умножения, складывая 'b' 'a' раз
        for (int i = 0; i < Math.Abs(a); i++)
            result += b;

        // Рекурсивная функция умножения
        static int umnozh1(int a, int b)
        {
            if (b == 0) // Базовый случай: любое число умноженное на 0 равно 0
                return 0;
            if (b > 0) // Если b положительное, будем добавлять a 'b' раз
                return (a + umnozh1(a, b - 1));
            if (b < 0) // Если b отрицательное, инвертируем знаки и выполняем умножение
                return -umnozh1(a, -b);
            return -1; // Это условие никогда не должно срабатывать
        }

        // Функция умножения с использованием побитовых операций
        int umnozh2(int a, int b)
        {
            int result1 = 0; // Инициализация результата
            while (b > 0) // Пока b положительно
            {
                if ((b & 1) != 0) // Проверка, является ли b нечетным
                    result1 += a; // Если нечетное, добавляем a к результату
                a <<= 1; // Умножаем a на 2 (сдвиг влево)
                b >>= 1; // Делим b на 2 (сдвиг вправо)
            }
            return result1; // Возвращаем результат умножения
        }

        // Функция умножения с использованием LINQ и агрегирования
        int umnozh3(int a, int b)
        {
            return Enumerable.Range(0, b).Aggregate(0, (total, current) => total + a); // Используем Aggregate для суммирования
        }

        // Функция умножения с использованием LINQ и суммирования
        int umnozh4(int a, int b)
        {
            return Enumerable.Range(1, b).Sum(x => a); // Используем Sum для сложения a 'b' раз
        }

        // Вывод результатов всех методов умножения
        Console.WriteLine("Результат: ");
        Console.WriteLine(umnozh1(a, b));
        Console.WriteLine(umnozh2(a, b));
        Console.WriteLine(result); // Результат обычного сложения
        Console.WriteLine(umnozh4(a, b)); // Результат умножения с использованием LINQ
    }
}
